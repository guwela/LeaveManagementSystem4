@model IEnumerable<LeaveTypeReadOnlyVM>

@{
    ViewData["Title"] = "Leave Types";
}

<div class="container mt-4">
    <h2 class="mb-4">Leave Management System</h2>

    <div class="mb-3">
        <!-- Button to trigger modal -->
        <button type="button" class="btn btn-outline-info" data-bs-toggle="modal" data-bs-target="#createModal">
            <i class="bi bi-plus-circle"></i> Create New Leave
        </button>
    </div>

    <div class="table-responsive">
        <table class="table table-striped table-hover align-middle">
            <thead class="table-light">
                <tr>
                    <th>@Html.DisplayNameFor(model => model.First().Name)</th>
                    <th>@Html.DisplayNameFor(model => model.First().NumberOfDay)</th>
                    <th class="text-center">Actions</th>
                </tr>
            </thead>
            <tbody>
                @if (Model != null && Model.Any())
                {
                    foreach (var item in Model)
                    {
                        <tr>
                            <td>@item.Name</td>
                            <td>@item.NumberOfDay</td>
                            <td class="text-center">
                                <a asp-action="Edit" asp-route-id="@item.Id" class="btn btn-warning btn-sm me-1">
                                    <i class="bi bi-pencil-square"></i> Edit
                                </a>
                                <a asp-action="Details" asp-route-id="@item.Id" class="btn btn-info btn-sm me-1">
                                    <i class="bi bi-eye"></i> Details
                                </a>
                                <a asp-action="Delete" asp-route-id="@item.Id" class="btn btn-danger btn-sm">
                                    <i class="bi bi-trash"></i> Delete
                                </a>
                            </td>
                        </tr>
                    }
                }
                else
                {
                    <tr>
                        <td colspan="3" class="text-center text-muted">No leave types found.</td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
</div>

<!-- Modal -->
<div class="modal fade" id="createModal" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Create Leave Type</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body" id="createModalBody">
                <div class="text-center p-4">Loading…</div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }
    

    <script>
        (function () {
            const modalEl = document.getElementById('createModal');
            const bodyEl = document.getElementById('createModalBody');

            // Load partial when modal is shown
            modalEl.addEventListener('show.bs.modal', function () {
                fetch('@Url.Action("CreateModal", "LeaveTypes")')
                    .then(r => r.text())
                    .then(html => {
                        bodyEl.innerHTML = html;
                        wireUpCreateForm();
                    })
                    .catch(() => bodyEl.innerHTML = '<div class="text-danger p-3">Failed to load form.</div>');
            });

            // Clear when hidden
            modalEl.addEventListener('hidden.bs.modal', function () {
                bodyEl.innerHTML = '';
            });

            function wireUpCreateForm() {
                const form = bodyEl.querySelector('form');
                if (!form) return;

                // Re-parse unobtrusive validation
                if (window.jQuery && $.validator && $.validator.unobtrusive) {
                    $.validator.unobtrusive.parse(form);
                }

                form.addEventListener('submit', async function (e) {
                    e.preventDefault();

                    if (window.jQuery && $(form).valid && !$(form).valid()) {
                        return;
                    }

                    const formData = new FormData(form);

                    const res = await fetch(form.action, {
                        method: 'POST',
                        body: formData,
                        headers: { 'X-Requested-With': 'XMLHttpRequest' }
                    });

                    const contentType = res.headers.get('content-type') || '';

                    if (contentType.includes('application/json')) {
                        const json = await res.json();
                        if (json.ok) {
                            bootstrap.Modal.getOrCreateInstance(modalEl).hide();
                            location.reload();
                            return;
                        }
                    }

                    // If server returned form again with validation errors
                    const html = await res.text(); 
                    bodyEl.innerHTML = html;
                    wireUpCreateForm();
                });
            }
        })();
    </script>
}
